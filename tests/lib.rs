extern crate assert;
extern crate complex;
extern crate czt;

use complex::c64;

macro_rules! chirp(
    ($m:expr) => ({
        use std::f64::consts::PI;
        let theta = -2.0 * PI / $m as f64;
        c64(theta.cos(), theta.sin())
    });
);

#[test]
fn forward_real() {
    let data = [
        1.576130816775483e-01,
        9.705927817606157e-01,
        9.571669482429456e-01,
        4.853756487228412e-01,
        8.002804688888001e-01,
        1.418863386272153e-01,
        4.217612826262750e-01,
        9.157355251890671e-01,
        7.922073295595544e-01,
        9.594924263929030e-01,
    ];
    let expected_result = [
         6.602111831687766e+00, -3.330669073875470e-16,
         6.961651498427756e-01,  2.339802401557220e-02,
        -1.275236051698197e+00, -4.839463190859927e-04,
        -4.848214873681843e-01, -5.265485614227395e-01,
        -1.277071313383780e+00,  7.821458553540981e-01,
        -3.440536096975195e-01, -3.521657193471262e-16,
        -1.277071313383781e+00, -7.821458553540985e-01,
        -4.848214873681850e-01,  5.265485614227390e-01,
        -1.275236051698199e+00,  4.839463190835502e-04,
         6.961651498427770e-01, -2.339802401557728e-02,
    ];

    let m = data.len();
    let result = czt::forward(&data, m, chirp!(m), c64(1.0, 0.0));
    assert::close(as_f64(&result), &expected_result[..], 1e-14);
}

#[test]
fn forward_complex() {
    let data = [
        8.147236863931789e-01, 1.576130816775483e-01,
        9.057919370756192e-01, 9.705927817606157e-01,
        1.269868162935061e-01, 9.571669482429456e-01,
        9.133758561390194e-01, 4.853756487228412e-01,
        6.323592462254095e-01, 8.002804688888001e-01,
        9.754040499940952e-02, 1.418863386272153e-01,
        2.784982188670484e-01, 4.217612826262750e-01,
        5.468815192049838e-01, 9.157355251890671e-01,
        9.575068354342976e-01, 7.922073295595544e-01,
        9.648885351992765e-01, 9.594924263929030e-01,
    ];
    let expected_result = [
         6.238553055831749e+00,  6.602111831687766e+00,
         1.354181005313841e+00,  9.642216142292481e-01,
        -2.864562964973690e-01, -1.789026257465937e-01,
         1.251129460280184e+00, -1.037906571249956e+00,
        -1.333821911972047e+00, -2.172769214747543e+00,
        -6.184034494048681e-01, -3.440536096975196e-01,
         2.304697987361479e-01, -3.813734120200171e-01,
         1.980323374347046e-01,  6.826359651358684e-02,
        -2.874241891355410e-01, -2.371569477649806e+00,
         1.400977053344992e+00,  4.281086854562995e-01,
    ];

    let m = data.len() / 2;
    let result = czt::forward(as_c64(&data), m, chirp!(m), c64(1.0, 0.0));
    assert::close(as_f64(&result), &expected_result[..], 1e-14);
}

#[test]
fn forward_complex_small_m() {
    let data = [
        8.147236863931789e-01, 1.576130816775483e-01,
        9.057919370756192e-01, 9.705927817606157e-01,
        1.269868162935061e-01, 9.571669482429456e-01,
        9.133758561390194e-01, 4.853756487228412e-01,
        6.323592462254095e-01, 8.002804688888001e-01,
        9.754040499940952e-02, 1.418863386272153e-01,
        2.784982188670484e-01, 4.217612826262750e-01,
        5.468815192049838e-01, 9.157355251890671e-01,
        9.575068354342976e-01, 7.922073295595544e-01,
        9.648885351992765e-01, 9.594924263929030e-01,
    ];
    let expected_result = [
         6.238553055831749e+00,  6.602111831687765e+00,
        -2.864562964973671e-01, -1.789026257465932e-01,
        -1.333821911972045e+00, -2.172769214747541e+00,
         2.304697987361482e-01, -3.813734120200151e-01,
        -2.874241891355401e-01, -2.371569477649796e+00,
    ];

    let m = data.len() / 2 - 5;
    let result = czt::forward(as_c64(&data), m, chirp!(m), c64(1.0, 0.0));
    assert::close(as_f64(&result), &expected_result[..], 1e-14);
}

#[test]
fn forward_complex_large_m() {
    let data = [
        8.147236863931789e-01, 1.576130816775483e-01,
        9.057919370756192e-01, 9.705927817606157e-01,
        1.269868162935061e-01, 9.571669482429456e-01,
        9.133758561390194e-01, 4.853756487228412e-01,
        6.323592462254095e-01, 8.002804688888001e-01,
        9.754040499940952e-02, 1.418863386272153e-01,
        2.784982188670484e-01, 4.217612826262750e-01,
        5.468815192049838e-01, 9.157355251890671e-01,
        9.575068354342976e-01, 7.922073295595544e-01,
        9.648885351992765e-01, 9.594924263929030e-01,
    ];
    let expected_result = [
         6.238553055831749e+00,  6.602111831687766e+00,
         1.613215736819029e+00, -2.663924556100892e+00,
         3.890265936019357e+00, -4.924428190758741e-01,
        -2.864562964973641e-01, -1.789026257465957e-01,
         2.385011013625547e+00, -1.100610328758628e+00,
         2.026744627883097e+00, -1.046712023541919e+00,
        -1.333821911972041e+00, -2.172769214747538e+00,
         1.673305247584364e-01, -1.296818180928050e-01,
        -3.530623771613099e-01,  9.353211460426021e-01,
         2.304697987361495e-01, -3.813734120200123e-01,
         6.491612060807203e-01,  5.173275101128529e-01,
         4.304078885610212e-01,  1.011461952140921e+00,
        -2.874241891355410e-01, -2.371569477649782e+00,
        -3.705651933107217e-01,  3.387876411534603e+00,
        -2.778974524340422e+00,  4.480836493785334e-01,
    ];

    let m = data.len() / 2 + 5;
    let result = czt::forward(as_c64(&data), m, chirp!(m), c64(1.0, 0.0));
    assert::close(as_f64(&result), &expected_result[..], 1e-13);
}

#[test]
fn forward_complex_different_w() {
    let data = [
        8.147236863931789e-01, 1.576130816775483e-01,
        9.057919370756192e-01, 9.705927817606157e-01,
        1.269868162935061e-01, 9.571669482429456e-01,
        9.133758561390194e-01, 4.853756487228412e-01,
        6.323592462254095e-01, 8.002804688888001e-01,
        9.754040499940952e-02, 1.418863386272153e-01,
        2.784982188670484e-01, 4.217612826262750e-01,
        5.468815192049838e-01, 9.157355251890671e-01,
        9.575068354342976e-01, 7.922073295595544e-01,
        9.648885351992765e-01, 9.594924263929030e-01,
    ];
    let expected_result = [
         6.238553055831747e+00,  6.602111831687768e+00,
        -8.148863311433077e-01,  1.826670091110860e+00,
        -5.302832848261247e+00, -3.101654605640940e+00,
        -3.695893012338369e-01, -7.761579433513170e+00,
         5.145833889231164e+00, -2.139596455072370e+01,
         2.772026093500966e+01, -7.899580787702988e+00,
         5.222079516362383e+01,  2.569517027056218e+01,
         5.017507627114431e+01,  1.049783249912596e+02,
        -8.440488330561563e+01,  3.294544161904523e+02,
        -9.943544148797370e+02,  1.892094573752597e+02,
    ];

    let m = data.len() / 2;
    let result = czt::forward(as_c64(&data), m, c64(0.9, -0.6), c64(1.0, 0.0));
    assert::close(as_f64(&result), &expected_result[..], 1e-10);
}

#[test]
fn forward_complex_different_a() {
    let data = [
        8.147236863931789e-01, 1.576130816775483e-01,
        9.057919370756192e-01, 9.705927817606157e-01,
        1.269868162935061e-01, 9.571669482429456e-01,
        9.133758561390194e-01, 4.853756487228412e-01,
        6.323592462254095e-01, 8.002804688888001e-01,
        9.754040499940952e-02, 1.418863386272153e-01,
        2.784982188670484e-01, 4.217612826262750e-01,
        5.468815192049838e-01, 9.157355251890671e-01,
        9.575068354342976e-01, 7.922073295595544e-01,
        9.648885351992765e-01, 9.594924263929030e-01,
    ];
    let expected_result = [
         4.136997039059224e+00, -2.866974604962991e+03,
         2.494844126298058e+03, -1.701543294698185e+03,
         2.394750193683131e+03,  6.201069039360293e+02,
         1.137524197778680e+03,  1.566073218912218e+03,
         1.868767819036000e+02,  1.596622192006452e+03,
        -6.358019114780045e+02,  1.340582628958666e+03,
        -1.054351576460311e+03,  8.123204923963754e+02,
        -1.263769658495960e+03,  3.299020571664508e+02,
        -1.574958154101987e+03, -1.682495392817663e+02,
        -1.681103759302350e+03, -1.527263923616471e+03,
    ];

    let m = data.len() / 2;
    let result = czt::forward(as_c64(&data), m, chirp!(m), c64(0.4, -0.2));
    assert::close(as_f64(&result), &expected_result[..], 1e-11);
}

fn as_f64<'l>(slice: &'l [c64]) -> &'l [f64] {
    unsafe {
        std::slice::from_raw_parts(slice.as_ptr() as *const _, 2 * slice.len())
    }
}

fn as_c64<'l>(slice: &'l [f64]) -> &'l [c64] {
    unsafe {
        std::slice::from_raw_parts(slice.as_ptr() as *const _, slice.len() / 2)
    }
}
